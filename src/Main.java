
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Map;
import java.util.Scanner;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.stream.Collectors;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Shuvo Podder
 */
public class Main extends javax.swing.JFrame {

    /**
     * Creates new form Main
     */
    public Main() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        query = new javax.swing.JTextField();
        query2 = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        result = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        p1o = new javax.swing.JLabel();
        ff1o = new javax.swing.JLabel();
        rr1o = new javax.swing.JLabel();
        p1 = new javax.swing.JTextField();
        rr1 = new javax.swing.JTextField();
        ff1 = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        p2o = new javax.swing.JLabel();
        ff2o = new javax.swing.JLabel();
        rr2o = new javax.swing.JLabel();
        ff2 = new javax.swing.JTextField();
        rr2 = new javax.swing.JTextField();
        p2 = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        m = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        avg = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(153, 153, 153));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setText("IR Evaluation System");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(264, 264, 264)
                .addComponent(jLabel1)
                .addContainerGap(396, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addContainerGap(66, Short.MAX_VALUE))
        );

        jPanel2.setBackground(new java.awt.Color(204, 204, 204));

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel4.setText("Query");

        jButton1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton1.setText("Evaluate");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        result.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        result.setText("result");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setText("System 1");

        p1o.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        p1o.setText("Precision");

        ff1o.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        ff1o.setText("F");

        rr1o.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        rr1o.setText("Recall");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(ff1o, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ff1, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rr1o)
                            .addComponent(p1o))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(p1, javax.swing.GroupLayout.DEFAULT_SIZE, 61, Short.MAX_VALUE)
                            .addComponent(rr1))))
                .addGap(20, 20, 20))
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(56, 56, 56)
                .addComponent(jLabel2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(p1o)
                    .addComponent(p1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rr1o)
                    .addComponent(rr1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ff1o, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ff1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setText("System 2");

        p2o.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        p2o.setText("Precision");

        ff2o.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        ff2o.setText("F");

        rr2o.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        rr2o.setText("Recall");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(p2o)
                            .addComponent(rr2o)
                            .addComponent(ff2o, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ff2, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(p2)
                                .addComponent(rr2, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(55, 55, 55)
                        .addComponent(jLabel3)))
                .addContainerGap(31, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(p2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rr2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(ff2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(p2o)
                        .addGap(14, 14, 14)
                        .addComponent(rr2o)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ff2o, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(43, Short.MAX_VALUE))
        );

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel5.setText("Query2");

        m.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        m.setText("Map Value");

        jButton3.setText("Map");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(query, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(jLabel5)
                        .addGap(76, 76, 76)
                        .addComponent(query2, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton3)
                        .addGap(308, 308, 308))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addComponent(m, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(285, 285, 285))))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(248, 248, 248)
                        .addComponent(jButton1))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(162, 162, 162)
                        .addComponent(result, javax.swing.GroupLayout.PREFERRED_SIZE, 532, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(query, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(query2, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5)
                            .addComponent(jButton3))
                        .addGap(29, 29, 29)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(152, 152, 152)
                        .addComponent(m)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                .addComponent(result, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addGap(32, 32, 32))
        );

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title 1", "Precision", "Recall"
            }
        ));
        jScrollPane1.setViewportView(table);

        jLabel6.setText("Avg. Percesion");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 51, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 279, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGap(61, 61, 61)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(avg, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 390, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(avg, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6))))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if (query.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Enter query first");
        } else {
            String st = query.getText();
            try {
                main(st);
                // TODO add your handling code here:
            } catch (IOException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed

        if (avg.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Evaluate query 1 First");
        } else {
            String st = query2.getText();
            try {
                main(st);
            } catch (IOException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
// TODO add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField avg;
    private javax.swing.JTextField ff1;
    private javax.swing.JLabel ff1o;
    private javax.swing.JTextField ff2;
    private javax.swing.JLabel ff2o;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel m;
    private javax.swing.JTextField p1;
    private javax.swing.JLabel p1o;
    private javax.swing.JTextField p2;
    private javax.swing.JLabel p2o;
    private javax.swing.JTextField query;
    private javax.swing.JTextField query2;
    private javax.swing.JLabel result;
    private javax.swing.JTextField rr1;
    private javax.swing.JLabel rr1o;
    private javax.swing.JTextField rr2;
    private javax.swing.JLabel rr2o;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables

    private void main(String string) throws FileNotFoundException, IOException {
        Map<String, List<Integer>> dictionary = new HashMap<String, List<Integer>>();
        Map<PackingListRow, Integer> items = new HashMap<PackingListRow, Integer>();
        HashMap<Integer, Double> tw = new HashMap<>();//term weight
        HashMap<Integer, Double> tw2 = new HashMap<>();//term weight system 2
        HashMap<Integer, Integer> rv = new HashMap<>();//term relivence
        HashMap<Integer, Integer> rv2 = new HashMap<>();//term relivence system2
        File dir = new File("DocFile");
        String[] fileNames = dir.list();
        int i = 1, j = 0;
        int total[] = new int[100];
        for (String fileName : fileNames) {
            File f = new File(dir, fileName);

            String st = "";
            BufferedReader br = new BufferedReader(new FileReader(f));
            while ((st = br.readLine()) != null) {
                st = normalizeText(st);

                Pattern p = Pattern.compile("[a-zA-Z]+");
                Matcher m = p.matcher(st.toLowerCase());

                while (m.find()) {
                    String word = m.group(); //spilt word from sentense
                    if (dictionary.get(word) == null) {
                        dictionary.put(word, new ArrayList<Integer>());
                    }
                    dictionary.get(word).add(i);
                    addItem(items, new PackingListRow(word, i), 1);
                }
                j++;
            }
            total[i] = j;
            i++;
        }
        removeDuplicate(dictionary);
        dictionary = Sort(dictionary);//sort terms in dictionary

        String st = string;

        List<String> ss = new ArrayList<>(Arrays.asList(st.toLowerCase().split(" ")));
        ListIterator<String> iterator = ss.listIterator();

        //system2
        Map<String, Double> m = new HashMap<>();//query frequency
        int freq = ss.size();
        for (int q = 0; q < freq; q++) {
            if (!m.containsKey(ss.get(q))) {
                m.put(ss.get(q), new Double(1.0));
            } else {
                m.put(ss.get(q), m.get(ss.get(q)) + 1.0);
            }
        }
        //System.out.println(m);
        for (int q = 0; q < m.size(); q++) {

            m.put(ss.get(q), new Double(Math.log(1+ (freq/m.get(ss.get(q))))));
        }
        //System.out.println("query weight " + m);//system 2
        double z = i - 1;//total documents
        while (iterator.hasNext()) {
            String word = iterator.next();
            // System.out.println("Value is : "+word+" "+ iterator.next()); 

            double df=0.0;
            try{
               df = dictionary.get(word).size(); 
            }catch(Exception e){
                JOptionPane.showMessageDialog(null, "There are missing query or no match Query Not found! Try again");
                continue;
            }
            
            //System.out.println("df/doc freq: " + df);//document frequency for term

            double idf = Math.log(z / df) * 1.0;

            Integer[] arr = new Integer[dictionary.get(word).size()];
            arr = dictionary.get(word).toArray(arr);
            double nn = 0;
            for (Integer x : arr) {
                PackingListRow obj = new PackingListRow(word, x);
//x= doc id
                double n = items.get(obj) / ((total[x.intValue()] - 1) * 1.0 * idf);
                float f = (float) (items.get(obj) / ((total[x.intValue()] - 1) * 1.0 * idf));

                if (z >= 3) {
                    nn = 1000;
                } else {
                    nn = 1.0;
                }
                n = Math.abs(n * nn);//debug

                Double old = tw.get(x);
                tw.put(x, old == null ? n : n + old);

                tw2.put(x, n * m.get(word));//system 2
                }

        }
System.out.print(tw);
        
        double r = 0, r2 = 0,t=1.0;
        double max = Collections.max(tw.values());
        if(max<1){
            t=max-.001;
        }
        Iterator hmIterator = tw.entrySet().iterator();

        while (hmIterator.hasNext()) {
            Map.Entry mapElement = (Map.Entry) hmIterator.next();
            double n = (double) mapElement.getValue();
            if (n > t) {
                rv.put((Integer) mapElement.getKey(), 1);
                r++;
            } else {
                rv.put((Integer) mapElement.getKey(), 0);
            }
        }

        //system2
        double t2=1.0;
        double max2 = Collections.max(tw2.values());
        if(max2<1){
            t2=max2-.001;
        }
        Iterator hmIterator2 = tw2.entrySet().iterator();

        while (hmIterator2.hasNext()) {
            Map.Entry mapElement2 = (Map.Entry) hmIterator2.next();
            double n2 = (double) mapElement2.getValue();
            if (n2 > t2) {
                rv2.put((Integer) mapElement2.getKey(), 1);//system2
                r2++;//total relevent 
            } else {
                rv2.put((Integer) mapElement2.getKey(), 0);//system2
            }
        }
        if(r2==0||r==0){
        return;
        }
        
        evaluate(rv, r, rv2, r2, z);

    }

    private String normalizeText(String st) throws FileNotFoundException {

        Scanner s = new Scanner(new File("stopwords.txt"));
        ArrayList<String> list2 = new ArrayList<String>();
        while (s.hasNext()) {
            list2.add(s.next());
        }
        s.close();
        List<String> allWords = new ArrayList<>(Arrays.asList(st.toLowerCase().split(" ")));
        allWords.removeAll(list2);
        String result = String.join(" ", allWords);
        return result;
    }

    private void addItem(Map<PackingListRow, Integer> items, PackingListRow packingListRow, int i) {

        Integer oldQuantity = items.get(packingListRow);
        items.put(packingListRow, oldQuantity == null ? i : i + oldQuantity);

    }

    private void removeDuplicate(Map<String, List<Integer>> dictionary) {
        Set< Map.Entry< String, List<Integer>>> dic = dictionary.entrySet();

        for (Map.Entry< String, List<Integer>> e : dic) {
            List<Integer> m = new ArrayList<>(e.getValue());

            List<Integer> newList = m.stream().distinct().collect(Collectors.toList());

            dictionary.replace(e.getKey(), newList);

        }

    }

    private Map<String, List<Integer>> Sort(Map<String, List<Integer>> dictionary) {
        List<Map.Entry<String, List<Integer>>> set = new LinkedList<Map.Entry<String, List<Integer>>>(dictionary.entrySet());

        // Sort the list 
        Collections.sort(set, new Comparator<Map.Entry<String, List<Integer>>>() {
            public int compare(Map.Entry<String, List<Integer>> o1,
                    Map.Entry<String, List<Integer>> o2) {
                return (o1.getKey()).compareTo(o2.getKey());
            }
        });

        // put data from sorted list to hashmap  
        HashMap<String, List<Integer>> dic = new LinkedHashMap<String, List<Integer>>();
        for (Map.Entry<String, List<Integer>> s : set) {
            dic.put(s.getKey(), s.getValue());
        }
        return dic; //To change body of generated methods, choose Tools | Templates.
    }

    private void evaluate(HashMap<Integer, Integer> rv, double r, HashMap<Integer, Integer> rv2, double r2, double z) {

        float precision = (float) (r / rv.size());
        float precision2 = (float) (r2 / rv2.size());
        float recall = (float) (r / z);
        float recall2 = (float) (r2 / z);

        float f1 = (float) (2.0 * (precision * recall) / (precision + recall));
        float f2 = (float) (2.0 * (precision2 * recall2) / (precision2 + recall2));
        
        p1.setText(Float.toString((float) (Math.round(precision * 100.0) / 100.0)));
        p2.setText(Float.toString((float) (Math.round(precision2 * 100) / 100.0)));
        rr1.setText(Float.toString((float) (Math.round(recall * 100) / 100.0)));
        rr2.setText(Float.toString((float) (Math.round(recall2 * 100) / 100.0)));
        ff1.setText(Float.toString((float) (Math.round(f1 * 100) / 100.0)));
        ff2.setText(Float.toString((float) (Math.round(f2 * 100) / 100.0)));
        System.out.println("Precision: "+Math.round(precision * 100.0) / 100.0+"\n"+"Recall:"+Math.round(recall * 100.0) / 100.0+"\n"+"F:"+Math.round(precision * 100.0) / 100.0);

        if (f1 > f2) {
            result.setText("System 1 is better than 2");
        }
        else if(f1==f2){
           result.setText("Both system are same in this case!"); 
        }
        else {
            result.setText("System 2 is better than 1");
        }
        int totalDoc = rv.size();
        double arr[][] = new double[2][100];
        Set<Map.Entry<Integer, Integer>> set = rv.entrySet();
        int j = 0, rr = 0, i = 1;
        double d = 0;
        for (Map.Entry<Integer, Integer> me : set) {
            int m = me.getValue().intValue();
            if (me.getValue() == 1) {
                rr++;
                d += (double) rr / i;
            }

            arr[0][j] = (double) rr / i;  //perception
            arr[1][j] = (double) rr / totalDoc; //recall 
            
            i++;
            j++;
        }

        System.out.println("Perception avg " + (d / rr) + " " + rr);

        float average = (float) (d / rr);
        if (avg.getText().equals("")) {
            avg.setText(Float.toString(average));
        } else {
            avg.setText(Float.toString(average));
            float map = (Float.parseFloat(avg.getText()) + average) / 2;
            m.setText("Map Value: " + Float.toString((float) (Math.round(map*100.0)/100.0)));
        }

     
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        Object[] row = new Object[3];
        int ii = 0;
        for (Map.Entry<Integer, Integer> entry : rv.entrySet()) {
            row[0] = "Doc " + entry.getKey();
            row[1] = Math.round(arr[0][ii] * 100.0) / 100.0;
            row[2] = Math.round(arr[1][ii] * 100.0) / 100.0;

            model.addRow(row);
            ii++;
        }
        int q = 1;
        row[0] = "Query:";
        row[1] = q;
        row[2] = "Avg:" + Math.round(average * 100.0) / 100.0;
        model.addRow(row);
        q++;

    }

}
